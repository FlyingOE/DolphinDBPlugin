 
loadPlugin("/home/qianxj/MQTTClient/PluginMQTTClient.txt"); 

use mqtt;
//***************************publish a table****************************************//
//1.using createCsvFormatter
MyFormat = take("", 5)
MyFormat[2] = "0.000"
f = createCsvFormatter(MyFormat, ',', ';')
//create a record for every device
def writeData(hardwareVector){
	hardwareNumber = size(hardwareVector)
	return table(take(hardwareVector,hardwareNumber) as hardwareId ,take(now(),
		hardwareNumber) as ts,rand(20..41,hardwareNumber) as temperature,
		rand(50,hardwareNumber) as humidity,rand(500..1000,
		hardwareNumber) as voltage)
}

def publishTableData(server,topic,iterations,hardwareVector,interval,f){
            try{   
            	conn=connect(server,1883,0,f,100)
            
		for(i in 0:iterations){
			print i
			t=writeData(hardwareVector)
			try {      
				publish(conn,topic,t)
				
			}
			catch(ex){
				print ex;
			}
			sleep(interval)
		}
		close(conn)
            }catch(ex){
            	print ex;
            }	
         
}

host="192.168.1.201"
publishTableData(host,"dolphindb/csv",10,0..59,100,f)
submitJob("submit_pub1", "submit_p1", publishTableData{host,"dolphindb/csv",10,100..149,100,f})
submitJob("submit_pub1", "submit_p1", publishTableData{host,"dolphindb/csv",99,200..249,100,f})


//2.using createJsonFormatter
f=mqtt::createJsonFormatter()
//create a record for every device
def writeData(hardwareVector){
	hardwareNumber = size(hardwareVector)
	return table(take(hardwareVector,hardwareNumber) as hardwareId ,take(now(),
		hardwareNumber) as ts,rand(20..41,hardwareNumber) as temperature,
		rand(50,hardwareNumber) as humidity,rand(500..1000,
		hardwareNumber) as voltage)
}

def publishTableData(server,topic,iterations,hardwareVector,interval,f){
            try{   
            	conn=connect(server,1883,0,f,100)
            
		for(i in 0:iterations){
			print i
			t=writeData(hardwareVector)
			try {      
				publish(conn,topic,t)
				
			}
			catch(ex){
				print ex;
			}
			sleep(interval)
		}
		close(conn)
            }catch(ex){
            	print ex;
            }	
         
}

host="192.168.1.201"
publishTableData(host,"ddbDev/s001",10,0..59,100,f)


//***************************publish string****************************************//
def simulatePubString(topic,deviceIds,interval,count){
            try{   
            	conn=connect("192.168.1.201",1883,0, ,)
            
		for(i in 0:count){
			pubstr=string(deviceIds)+ "," + string(now())+"," + string(rand(100.0,1)[0] )+"," + string(rand(100.0,1)[0] )+"," + string(i)
			try {      
				publish(conn,topic,pubstr)
				sleep(interval)
			}
			catch(ex){
				print ex;
			}
		}
		close(conn)
            }catch(ex){
            	print ex;
            }
}
simulatePubString("devStr/sensor001",1, 50, 10)
simulatePubString("devStr/sensor002",2, 50, 100)
submitJob("submit_pubnext1", "submit_pn1", simulatePubString{"devStr/sensor001",1, 50, 1000})
submitJob("submit_pubnext2", "submit_pn2", simulatePubString{"devStr/sensor002",2, 10, 1000})

conn=mqtt::connect("192.168.1.201",1883,0, ,)
mqtt::publish(conn,"devStr/sensor001",["hello world","welcome"])

getRecentJobs()
