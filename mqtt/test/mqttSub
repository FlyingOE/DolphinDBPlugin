 
loadPlugin("/home/qianxj/MQTTClient/PluginMQTTClient.txt"); 


//*******************************subscribe : handler is a table************************************************//
//1.using createCsvParser
p = mqtt::createCsvParser([INT, TIMESTAMP, DOUBLE, DOUBLE,DOUBLE], ',', ';' )
sensorInfoTable1 = table( 10000:0,`deviceID`send_time`temperature`humidity`voltage ,[INT, TIMESTAMP, DOUBLE, DOUBLE,DOUBLE])

try {      
     conn = mqtt::subscribe("192.168.1.201",1883,"dolphindb/csv",p,sensorInfoTable1)
   
}
catch(ex)
{
    print ex
};  

print conn

//2.using createJsonParser
p = mqtt::createJsonParser([INT, TIMESTAMP, DOUBLE, DOUBLE,DOUBLE],`hardwareId`ts`temperature`humidity`voltage )
sensorInfoTable2 = table( 10000:0,`hardwareId`ts`temperature`humidity`voltage ,[INT, TIMESTAMP, DOUBLE, DOUBLE,DOUBLE])

try {      
     conn = mqtt::subscribe("192.168.1.201",1883,"ddbDev/#",p,sensorInfoTable2)
}
catch(ex)
{
    print ex
};  



//*******************************subscribe : handler is a function************************************************//

sensorInfoTable = table( 10000:0,`deviceID`send_time`recv_time`temperature`humidity`voltage ,[INT, TIMESTAMP,TIMESTAMP, DOUBLE, DOUBLE,DOUBLE])
def callback(mutable t, topic,message) {//received string 
    try {
           val=split(message,",")
           insert into t values(int(val[0]), timestamp(val[1]),now(), double(val[2]),double(val[3]),double(val[4])) 
    }
    catch(ex) {
    	print ex
    };  
}

try {      
     conn = mqtt::subscribe("192.168.1.201",1883,"devStr/#",,callback{sensorInfoTable})
}
catch(ex)
{
    print ex
};  


unsubcribe(conn)    
select top 10 *  from sensorInfoTable order by recv_time desc
select count(*) from sensorInfoTable group by deviceID

getRecentJobs()

//*******************************formatter&parser************************************************//
use mqtt;
p = createJsonParser([BOOL,CHAR,SHORT,INT,LONG,DATE,MONTH,TIME,MINUTE,SECOND,DATETIME,TIMESTAMP,NANOTIME,NANOTIMESTAMP,FLOAT,DOUBLE,STRING,SYMBOL],
`bool`char`short`int`long`date`month`time`minute`second`datetime`timestamp`nanotime`nanotimestamp`float`double`string`symbol)
f = createJsonFormatter()

def createT(n) {
 return table(take([false, true], n) as bool, take('a'..'z', n) as char, take(short(-5..5), n) as short, take(-5..5, n) as int, take(-5..5, n) as long, take(2001.01.01..2010.01.01, n) as date, take(2001.01M..2010.01M, n) as month, take(time(now()), n) as time, take(minute(now()), n) as minute, take(second(now()), n) as second, take(datetime(now()), n) as datetime, take(now(), n) as timestamp, take(nanotime(now()), n) as nanotime, take(nanotimestamp(now()), n) as nanotimestamp, take(3.1415, n) as float, take(3.1415, n) as double, take(`AAPL`IBM, n) as string, take(`AAPL`IBM, n) as symbol)
}
t = createT(100)
f = mqtt::createJsonFormatter()
p = createJsonParser([BOOL,CHAR,SHORT,INT,LONG,DATE,MONTH,TIME,MINUTE,SECOND,DATETIME,TIMESTAMP,NANOTIME,NANOTIMESTAMP,FLOAT,DOUBLE,STRING,SYMBOL],
`bool`char`short`int`long`date`month`time`minute`second`datetime`timestamp`nanotime`nanotimestamp`float`double`string`symbol)

s=f(t)
x=p(s)


p = createCsvParser([BOOL,CHAR,SHORT,INT,LONG,DATE,MONTH,TIME,MINUTE,SECOND,DATETIME,TIMESTAMP,NANOTIME,NANOTIMESTAMP,FLOAT,DOUBLE,STRING,SYMBOL])
f = createCsvFormatter([BOOL,CHAR,SHORT,INT,LONG,DATE,MONTH,TIME,MINUTE,SECOND,DATETIME,TIMESTAMP,NANOTIME,NANOTIMESTAMP,FLOAT,DOUBLE,STRING,SYMBOL])
f(t)
p(f(t))



