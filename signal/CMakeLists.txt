cmake_minimum_required(VERSION 3.10)
project(signal)
add_definitions(-DLOCKFREE_SYMBASE)

ADD_DEFINITIONS(-DLINUX)
ADD_DEFINITIONS(-D_GLIBCXX_USE_CXX11_ABI=0)
add_compile_options(-fPIC)
FIND_PACKAGE(OpenMP REQUIRED)
if(OPENMP_FOUND)
    set(CMAKE_C_FLAGS "${OpenMP_C_FLAGS}")
    set (CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} ${OpenMP_CXX_FLAGS}")
    set (CMAKE_EXE_LINKER_FLAGS "${CMAKE_EXE_LINKER_FLAGS} ${OpenMP_EXE_LINKER_FLAGS}")
endif()
set(CMAKE_CXX_STANDARD 11)
set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -O3 -fopenmp")
set(INC_DIR ${PROJECT_SOURCE_DIR}/../include)

include_directories(${PROJECT_SOURCE_DIR}/include ${INC_DIR})
link_directories(${LIBDOLPHINDB})
if(DEFINED BUILD_ARM)
    message("build arm")
    link_directories(${PROJECT_SOURCE_DIR}/lib_arm)
else()
    link_directories(${PROJECT_SOURCE_DIR}/lib)
endif()
link_directories(${PROJECT_BINARY_DIR})
aux_source_directory(${PROJECT_SOURCE_DIR}/src DIR_SRCS)
add_library(PluginSignal SHARED ${DIR_SRCS})
set_target_properties(PluginSignal PROPERTIES LINK_FLAGS "-Wl,-rpath,$ORIGIN")
target_link_libraries(PluginSignal DolphinDB fftw3_omp fftw3 m pthread)