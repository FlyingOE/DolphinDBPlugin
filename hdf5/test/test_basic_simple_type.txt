
//set your path here
loadPlugin("/home/swang/dolphin_workspace/DolphinDBPlugin/hdf5/build/PluginHdf5.txt"); 
H5_FILE_PATH="/home/swang/dolphin_workspace/DolphinDBPlugin/hdf5/h5file"

@testing:case="test_fixed_string"
t=hdf5::read(H5_FILE_PATH+"/float.h5","fs")
assert 1,(size t.keys())==4
assert 2,(size t) == 1
assert 3,t[0,0]==`asd
assert 4,t[0,1]==`fds
assert 5,t[0,2]==`sdf
assert 6,t[0,3]==`eee
assert 7,(typestr t.values()[0])== "STRING VECTOR"
assert 8,(typestr t.values()[1])== "STRING VECTOR"
assert 9,(typestr t.values()[2])== "STRING VECTOR"
assert 10,(typestr t.values()[3])== "STRING VECTOR"

@testing:case="test_fixed_string_to_symbol"
t=table(`a as a,`b as b,`c as c,`d as d)
hdf5::read(H5_FILE_PATH+"/float.h5","fs",t)
assert 1,(size t.keys())==4
assert 2,(size t) == 2
assert 3,t.values()[0]==`a`asd
assert 4,t.values()[1]==`b`fds
assert 5,t.values()[2]==`c`sdf
assert 6,t.values()[3]==`d`eee
assert 7,(typestr t.values()[0])== "STRING VECTOR"
assert 8,(typestr t.values()[1])== "STRING VECTOR"
assert 9,(typestr t.values()[2])== "STRING VECTOR"
assert 10,(typestr t.values()[3])== "STRING VECTOR"

@testing:case="test_fixed_string_with_symbol_describe"
t=table(rand(`a`b ,1) as a,`b as b,`c as c,`d as d)
hdf5::read(H5_FILE_PATH+"/float.h5","fs",t)
assert 1,(size t.keys())==4
assert 2,(size t) == 2
assert 3,t.values()[0] ==`a`asd ||  t.values()[0]==`b`asd
assert 4,t.values()[1]==`b`fds
assert 5,t.values()[2]==`c`sdf
assert 6,t.values()[3]==`d`eee
assert 7,(typestr t.values()[0])== "FAST SYMBOL VECTOR"//string -> symbol
assert 8,(typestr t.values()[1])== "STRING VECTOR"
assert 9,(typestr t.values()[2])== "STRING VECTOR"
assert 10,(typestr t.values()[3])== "STRING VECTOR"

@testing:case="test_fixed_string_with_unsupported_describe" ,exception=1
t=table(7 as a,`b as b,`c as c,`d as d)
hdf5::read(H5_FILE_PATH+"/float.h5","fs",t)

@testing:case="test_fixed_string_with_null"
t=table(rand(`a`b ,1) as a,`b as b,`c as c,`d as d,`e as ee,`f as f,`g as g,`h as h, `t as t ,`u as u)
hdf5::read(H5_FILE_PATH+"/float.h5","float_str",t)
assert 1,(size t.keys())==10
assert 2,(size t) == 11
assert 3,t.values()[0,0] in `a`b
assert 4,t.values()[0,1:(t.columns())] ==`44444444444444444444````````
assert 5,t.values()[1]==`b`5`````````
assert 6,t.values()[2]==`c`5`````````
assert 7,t.values()[3]==`d`6`````````
assert 8,t.values()[4]== `e`7`````````
assert 9,t.values()[5]==`f``````````
assert 10,(typestr t.values()[0])== "FAST SYMBOL VECTOR"//string -> symbol
assert 11,(typestr t.values()[1])== "STRING VECTOR"
assert 12,(typestr t.values()[2])== "STRING VECTOR"
assert 13,(typestr t.values()[3])== "STRING VECTOR"

//test enum

@testing:case="test_enum"
t=hdf5::read(H5_FILE_PATH+"/smpl_enum.h5","enum3")
assert 1,(size t.keys())==5
assert 2,(size t) == 5
assert 3,t.values()[0]==`R`R`R`R`R
assert 4,t.values()[1]==`R`R`R`G`R
assert 5,t.values()[2]==`B`R`B`R`R
assert 6,t.values()[3]==`R`G`R`R`R
assert 7,t.values()[4]==`R`R`R`R`R
assert 8,(typestr t.values()[0])== "FAST SYMBOL VECTOR"
assert 9,(typestr t.values()[1])== "FAST SYMBOL VECTOR"
assert 10,(typestr t.values()[2])== "FAST SYMBOL VECTOR"
assert 11,(typestr t.values()[3])== "FAST SYMBOL VECTOR"
assert 12,(typestr t.values()[4])== "FAST SYMBOL VECTOR"

@testing:case="test_enum_to_string"
t=table(symbol([`a]) as a,`b as b,`c as c,`d as d,`e as ee)
t=hdf5::read(H5_FILE_PATH+"/smpl_enum.h5","enum3",t)
assert 1,(size t.keys())==5
assert 2,(size t) == 6
assert 3,t.values()[0]==`a`R`R`R`R`R
assert 4,t.values()[1]==`b`R`R`R`G`R
assert 5,t.values()[2]==`c`B`R`B`R`R
assert 6,t.values()[3]==`d`R`G`R`R`R
assert 7,t.values()[4]==`e`R`R`R`R`R
assert 8,(typestr t.values()[0])== "FAST SYMBOL VECTOR"
assert 9,(typestr t.values()[1])== "STRING VECTOR"
assert 10,(typestr t.values()[2])== "STRING VECTOR"
assert 11,(typestr t.values()[3])== "STRING VECTOR"
assert 12,(typestr t.values()[4])== "STRING VECTOR"

@testing:case="test_enum_with_null_to_string"
t=table(symbol([`a]) as a as a,`b as b,`c as c)
t=hdf5::read(H5_FILE_PATH+"/smpl_enum.h5","enum4",t)
assert 1,(size t.keys())==3
assert 2,(size t) == 4
assert 3,t.values()[0]==`a`a``c
assert 4,t.values()[1]==`b``b`
assert 5,t.values()[2]==`c`a``c
assert 6,(typestr t.values()[0])== "FAST SYMBOL VECTOR"
assert 7,(typestr t.values()[1])== "STRING VECTOR"
assert 8,(typestr t.values()[2])== "STRING VECTOR"

//test vlen_str

@testing:case="test_vlen_str"
t=hdf5::read(H5_FILE_PATH+"/vlen_str.h5","vstr")
assert 1,(size t.keys())==4
assert 2,(size t) == 3
assert 3,t.values()[0]==["AA","1","~"]
assert 4,t.values()[1]==`BBB``gg
assert 5,t.values()[2]==["CCC","333","*&^"]
assert 6,t.values()[3]==`DDDD`9080`wwww
assert 7,(typestr t.values()[0])== "STRING VECTOR"
assert 8,(typestr t.values()[1])== "STRING VECTOR"
assert 9,(typestr t.values()[2])== "STRING VECTOR"
assert 10,(typestr t.values()[2])== "STRING VECTOR"

@testing:case="test_vlen_str_to_symbol"
t=table(symbol([`a]) as a,`b as b,`c as c,`d as d)
t=hdf5::read(H5_FILE_PATH+"/vlen_str.h5","vstr",t)
assert 1,(size t.keys())==4
assert 2,(size t) == 4
assert 3,t.values()[0]==["a","AA","1","~"]
assert 4,t.values()[1]==`b`BBB``gg
assert 5,t.values()[2]==["c","CCC","333","*&^"]
assert 6,t.values()[3]==`d`DDDD`9080`wwww
assert 7,(typestr t.values()[0])== "FAST SYMBOL VECTOR"
assert 8,(typestr t.values()[1])== "STRING VECTOR"
assert 9,(typestr t.values()[2])== "STRING VECTOR"
assert 10,(typestr t.values()[2])== "STRING VECTOR"


//testing char
@testing:case="test_char"
t=hdf5::read(H5_FILE_PATH+"/smpl_numeric.h5","schar")
assert 1,(size t.keys())==7
assert 2,(size t) == 3
assert 3,t.values()[0]==[45,-120,74]
assert 4,t.values()[1]==[77,-56,0]
assert 5,(typestr t.values()[0])== "FAST CHAR VECTOR"
assert 6,(typestr t.values()[1])== "FAST CHAR VECTOR"

@testing:case="test_char_to_numericl"
t=table(1c as a,false as b,5h as c,6 as d,7l as ee,8.6f as f,9.65 as g);
t=hdf5::read(H5_FILE_PATH+"/smpl_numeric.h5","schar",t)
assert 1,(size t.keys())==7
assert 2,(size t) == 4
assert 3,t.values()[0]==[1,45,-120,74]
assert 4,t.values()[1]==[false,true,true,false]
assert 5,t.values()[2]==[5,23,98,-93]
assert 6,t.values()[3]==[6,54,59,-45]
assert 7,t.values()[4]==[7,67,-77,11]
assert 8,t.values()[5]==[8.6f,89,53,-67]
assert 9,t.values()[6]==[9.65,-98,26,0]
assert 10,(typestr t.values()[0])== "FAST CHAR VECTOR"
assert 11,(typestr t.values()[1])== "FAST BOOL VECTOR"
assert 12,(typestr t.values()[2])== "FAST SHORT VECTOR"
assert 13,(typestr t.values()[3])== "FAST INT VECTOR"
assert 14,(typestr t.values()[4])== "FAST LONG VECTOR"
assert 15,(typestr t.values()[5])== "FAST FLOAT VECTOR"
assert 16,(typestr t.values()[6])== "FAST DOUBLE VECTOR"

@testing:case="test_uchar"
t=hdf5::read(H5_FILE_PATH+"/smpl_numeric.h5","uchar")
assert 1,(size t.keys())==7
assert 2,(size t) == 3
assert 3,t.values()[0]==[0,57,237]
assert 4,t.values()[1]==[255,42,0]
assert 5,(typestr t.values()[0])== "FAST SHORT VECTOR"
assert 6,(typestr t.values()[1])== "FAST SHORT VECTOR"

@testing:case="test_uchar_to_numericl"
t=table(-71c as a,false as b,5h as c,6 as d,7l as ee,8.6f as f,9.65 as g);
t=hdf5::read(H5_FILE_PATH+"/smpl_numeric.h5","uchar",t)
assert 1,(size t.keys())==7
assert 2,(size t) == 4
assert 3,t.values()[0]==[-71,0,57,127]
assert 4,t.values()[1]==[false,true,true,false]
assert 5,t.values()[2]==[5,128,96,86]
assert 6,t.values()[3]==[6,250,32,54]
assert 7,t.values()[4]==[7,26,150,28]
assert 8,t.values()[5]==[8.6f,15,85,6]
assert 9,t.values()[6]==[9.65,89,96,7]
assert 10,(typestr t.values()[0])== "FAST CHAR VECTOR"
assert 11,(typestr t.values()[1])== "FAST BOOL VECTOR"
assert 12,(typestr t.values()[2])== "FAST SHORT VECTOR"
assert 13,(typestr t.values()[3])== "FAST INT VECTOR"
assert 14,(typestr t.values()[4])== "FAST LONG VECTOR"
assert 15,(typestr t.values()[5])== "FAST FLOAT VECTOR"
assert 16,(typestr t.values()[6])== "FAST DOUBLE VECTOR"

@testing:case="test_sshort"
t=hdf5::read(H5_FILE_PATH+"/smpl_numeric.h5","sshort")
assert 1,(size t.keys())==7
assert 2,(size t) == 3
assert 3,t.values()[0]==[-9834,-987,967]
assert 4,t.values()[1]==[2343,0,54]
assert 5,(typestr t.values()[0])== "FAST SHORT VECTOR"
assert 6,(typestr t.values()[1])== "FAST SHORT VECTOR"

@testing:case="test_sshort_to_numericl"
t=table(-71c as a,false as b,5h as c,6 as d,7l as ee,8.6f as f,9.65 as g);
t=hdf5::read(H5_FILE_PATH+"/smpl_numeric.h5","sshort",t)
assert 1,(size t.keys())==7
assert 2,(size t) == 4
assert 3,t.values()[0]==[-71,-127,-127,127]
assert 4,t.values()[1]==[false,true,false,true]
assert 5,t.values()[2]==[5,123,567,789]
assert 6,t.values()[3]==[6,87,77,678]
assert 7,t.values()[4]==[7,687,546,90]
assert 8,t.values()[5]==[8.6f,45,789,54]
assert 9,t.values()[6]==[9.65,90,45,0]
assert 10,(typestr t.values()[0])== "FAST CHAR VECTOR"
assert 11,(typestr t.values()[1])== "FAST BOOL VECTOR"
assert 12,(typestr t.values()[2])== "FAST SHORT VECTOR"
assert 13,(typestr t.values()[3])== "FAST INT VECTOR"
assert 14,(typestr t.values()[4])== "FAST LONG VECTOR"
assert 15,(typestr t.values()[5])== "FAST FLOAT VECTOR"
assert 16,(typestr t.values()[6])== "FAST DOUBLE VECTOR"

@testing:case="test_ushort"
t=hdf5::read(H5_FILE_PATH+"/smpl_numeric.h5","ushort")
assert 1,(size t.keys())==7
assert 2,(size t) == 3
assert 3,t.values()[0]==[9834,987,63357]
assert 4,t.values()[1]==[2343,0,65234]
assert 5,(typestr t.values()[0])== "FAST INT VECTOR"
assert 6,(typestr t.values()[1])== "FAST INT VECTOR"

@testing:case="test_ushort_to_numericl"
t=table(-71c as a,false as b,5h as c,6 as d,7l as ee,8.6f as f,9.65 as g);
t=hdf5::read(H5_FILE_PATH+"/smpl_numeric.h5","ushort",t)
assert 1,(size t.keys())==7
assert 2,(size t) == 4
assert 3,t.values()[0]==[-71,127,127,127]
assert 4,t.values()[1]==[false,true,false,true]
assert 5,t.values()[2]==[5,123,567,32767]
assert 6,t.values()[3]==[6,87,77,678]
assert 7,t.values()[4]==[7,687,546,90]
assert 8,t.values()[5]==[8.6f,45,789,54]
assert 9,t.values()[6]==[9.65,90,45,0]
assert 10,(typestr t.values()[0])== "FAST CHAR VECTOR"
assert 11,(typestr t.values()[1])== "FAST BOOL VECTOR"
assert 12,(typestr t.values()[2])== "FAST SHORT VECTOR"
assert 13,(typestr t.values()[3])== "FAST INT VECTOR"
assert 14,(typestr t.values()[4])== "FAST LONG VECTOR"
assert 15,(typestr t.values()[5])== "FAST FLOAT VECTOR"
assert 16,(typestr t.values()[6])== "FAST DOUBLE VECTOR"

@testing:case="test_sint"
t=hdf5::read(H5_FILE_PATH+"/smpl_numeric.h5","sint")
assert 1,(size t.keys())==7
assert 2,(size t) == 3
assert 3,t.values()[0]==[-758,61,799]
assert 4,t.values()[1]==[8,0,5444]
assert 5,(typestr t.values()[0])== "FAST INT VECTOR"
assert 6,(typestr t.values()[1])== "FAST INT VECTOR"

@testing:case="test_sint_to_numericl"
t=table(-71c as a,false as b,5h as c,6 as d,7l as ee,8.6f as f,9.65 as g);
t=hdf5::read(H5_FILE_PATH+"/smpl_numeric.h5","sint",t)
assert 1,(size t.keys())==7
assert 2,(size t) == 4
assert 3,t.values()[0]==[-71,-127,61,127]
assert 4,t.values()[1]==[false,true,false,true]
assert 5,t.values()[2]==[5,-32767,28,32767]
assert 6,t.values()[3]==[6,87,77,678]
assert 7,t.values()[4]==[7,687,546,90]
assert 8,t.values()[5]==[8.6f,45,789,54]
assert 9,t.values()[6]==[9.65,90,45,0]
assert 10,(typestr t.values()[0])== "FAST CHAR VECTOR"
assert 11,(typestr t.values()[1])== "FAST BOOL VECTOR"
assert 12,(typestr t.values()[2])== "FAST SHORT VECTOR"
assert 13,(typestr t.values()[3])== "FAST INT VECTOR"
assert 14,(typestr t.values()[4])== "FAST LONG VECTOR"
assert 15,(typestr t.values()[5])== "FAST FLOAT VECTOR"
assert 16,(typestr t.values()[6])== "FAST DOUBLE VECTOR"

@testing:case="test_uint"
t=hdf5::read(H5_FILE_PATH+"/smpl_numeric.h5","uint")
assert 1,(size t.keys())==7
assert 2,(size t) == 3
assert 3,t.values()[0]==[758,61,799]
assert 4,t.values()[2]==[325847,28,325847]
assert 5,(typestr t.values()[0])== "FAST LONG VECTOR"
assert 6,(typestr t.values()[1])== "FAST LONG VECTOR"

@testing:case="test_uint_to_numericl"
t=table(-71c as a,false as b,5h as c,6 as d,7l as ee,8.6f as f,9.65 as g);
t=hdf5::read(H5_FILE_PATH+"/smpl_numeric.h5","uint",t)
assert 1,(size t.keys())==7
assert 2,(size t) == 4
assert 3,t.values()[0]==[-71,127,61,127]
assert 4,t.values()[1]==[false,true,false,true]
assert 5,t.values()[2]==[5,32767,28,32767]
assert 6,t.values()[3]==[6,87,77,678]
assert 7,t.values()[4]==[7,687,546,90]
assert 8,t.values()[5]==[8.6f,45,789,54]
assert 9,t.values()[6]==[9.65,90,45,0]
assert 10,(typestr t.values()[0])== "FAST CHAR VECTOR"
assert 11,(typestr t.values()[1])== "FAST BOOL VECTOR"
assert 12,(typestr t.values()[2])== "FAST SHORT VECTOR"
assert 13,(typestr t.values()[3])== "FAST INT VECTOR"
assert 14,(typestr t.values()[4])== "FAST LONG VECTOR"
assert 15,(typestr t.values()[5])== "FAST FLOAT VECTOR"
assert 16,(typestr t.values()[6])== "FAST DOUBLE VECTOR"

@testing:case="test_slong"
t=hdf5::read(H5_FILE_PATH+"/smpl_numeric.h5","slong")
assert 1,(size t.keys())==7
assert 2,(size t) == 3
assert 3,t.values()[0]==[-758,61,799]
assert 4,t.values()[1]==[2345678910,0,5444]
assert 5,(typestr t.values()[0])== "FAST LONG VECTOR"
assert 6,(typestr t.values()[1])== "FAST LONG VECTOR"

@testing:case="test_slong_to_numericl"
t=table(-71c as a,false as b,5h as c,6 as d,7l as ee,8.6f as f,9.65 as g);
t=hdf5::read(H5_FILE_PATH+"/smpl_numeric.h5","slong",t)
assert 1,(size t.keys())==7
assert 2,(size t) == 4
assert 3,t.values()[0]==[-71,-127,61,127]
assert 4,t.values()[1]==[false,true,false,true]
assert 5,t.values()[2]==[5,-32767,28,32767]
assert 6,t.values()[3]==[6,-2147483647,23,2147483647]
assert 7,t.values()[4]==[7,687,546,90]
assert 8,t.values()[5]==[8.6f,45,789,54]
assert 9,t.values()[6]==[9.65,90,45,0]
assert 10,(typestr t.values()[0])== "FAST CHAR VECTOR"
assert 11,(typestr t.values()[1])== "FAST BOOL VECTOR"
assert 12,(typestr t.values()[2])== "FAST SHORT VECTOR"
assert 13,(typestr t.values()[3])== "FAST INT VECTOR"
assert 14,(typestr t.values()[4])== "FAST LONG VECTOR"
assert 15,(typestr t.values()[5])== "FAST FLOAT VECTOR"
assert 16,(typestr t.values()[6])== "FAST DOUBLE VECTOR"

@testing:case="test_ulong",exception = 1
t=hdf5::read(H5_FILE_PATH+"/smpl_numeric.h5","ulong")

@testing:case="test_float"
t=hdf5::read(H5_FILE_PATH+"/smpl_numeric.h5","float")
assert 1,(size t.keys())==7
assert 2,(size t) == 3
assert 3,t.values()[0]==[-758,61,758]
assert 4,t.values()[1]==[1.0,0,1.0]
assert 5,(typestr t.values()[0])== "FAST FLOAT VECTOR"
assert 6,(typestr t.values()[1])== "FAST FLOAT VECTOR"

@testing:case="test_float_to_numeric"
t=table(-71c as a,false as b,5h as c,6 as d,7l as ee,8.6f as f,9.65 as g);
t=hdf5::read(H5_FILE_PATH+"/smpl_numeric.h5","float",t)
assert 1,(size t.keys())==7
assert 2,(size t) == 4
assert 3,t.values()[0]==[-71,-127,61,127]
assert 4,t.values()[1]==[false,true,false,true]
assert 5,t.values()[2]==[5,-32767,28,32767]
assert 6,t.values()[3]==[6,-2147483647,23,2147483647]
assert 7,t.values()[4]==[7,9223372036854775807l,159876,-9223372036854775807l]
assert 8,t.values()[5]==[8.6f,9.2854f,72.85f,5.896f]
assert 9,t.values()[6]==[9.65,90,45,0]
assert 10,(typestr t.values()[0])== "FAST CHAR VECTOR"
assert 11,(typestr t.values()[1])== "FAST BOOL VECTOR"
assert 12,(typestr t.values()[2])== "FAST SHORT VECTOR"
assert 13,(typestr t.values()[3])== "FAST INT VECTOR"
assert 14,(typestr t.values()[4])== "FAST LONG VECTOR"
assert 15,(typestr t.values()[5])== "FAST FLOAT VECTOR"
assert 16,(typestr t.values()[6])== "FAST DOUBLE VECTOR"

@testing:case="test_double"
t=hdf5::read(H5_FILE_PATH+"/smpl_numeric.h5","double")
assert 1,(size t.keys())==7
assert 2,(size t) == 3
assert 3,t.values()[0]==[-758,61,758]
assert 4,t.values()[1]==[1.0,0,1.0]
assert 5,(typestr t.values()[0])== "FAST DOUBLE VECTOR"
assert 6,(typestr t.values()[1])== "FAST DOUBLE VECTOR"

@testing:case="test_double_to_numericl"
t=table(-71c as a,false as b,5h as c,6 as d,7l as ee,8.6f as f,9.65 as g);
t=hdf5::read(H5_FILE_PATH+"/smpl_numeric.h5","double",t)
assert 1,(size t.keys())==7
assert 2,(size t) == 4
assert 3,t.values()[0]==[-71,-127,61,127]
assert 4,t.values()[1]==[false,true,false,true]
assert 5,t.values()[2]==[5,-32767,28,32767]
assert 6,t.values()[3]==[6,-2147483647,23,2147483647]
assert 7,t.values()[4]==[7,9223372036854775807l,159876,-9223372036854775807l]
assert 8,t.values()[5]==[8.6f,340282346638528860000000000000000000000f,72.85f,-340282326638528860000000000000000000000f]
assert 9,t.values()[6]==[9.65,8.8888e92,45.8,-8.8888e92]
assert 10,(typestr t.values()[0])== "FAST CHAR VECTOR"
assert 11,(typestr t.values()[1])== "FAST BOOL VECTOR"
assert 12,(typestr t.values()[2])== "FAST SHORT VECTOR"
assert 13,(typestr t.values()[3])== "FAST INT VECTOR"
assert 14,(typestr t.values()[4])== "FAST LONG VECTOR"
assert 15,(typestr t.values()[5])== "FAST FLOAT VECTOR"
assert 16,(typestr t.values()[6])== "FAST DOUBLE VECTOR"


@testing:case="test_timestamp64"
t=hdf5::read(H5_FILE_PATH+"/timestamp.h5","ts64")
t2=hdf5::read(H5_FILE_PATH+"/timestamp.h5","ts64_in_llong")
assert 1,(size t.keys())==9
assert 2,(size t2.keys())==9
assert 3,(size t)==3
assert 4,(size t2)==3
assert 5,cast(t.values()[0],LONG)==t2.values()[0]
assert 6,cast(t.values()[1],LONG)==t2.values()[1]
assert 7,cast(t.values()[2],LONG)==t2.values()[2]
assert 8,cast(t.values()[3],LONG)==t2.values()[3]
assert 9,cast(t.values()[4],LONG)==t2.values()[4]
assert 10,(typestr t.values()[0])== "FAST TIMESTAMP VECTOR"
assert 11,(typestr t.values()[1])== "FAST TIMESTAMP VECTOR"
assert 12,(typestr t.values()[2])== "FAST TIMESTAMP VECTOR"
assert 13,(typestr t.values()[3])== "FAST TIMESTAMP VECTOR"
assert 14,(typestr t.values()[4])== "FAST TIMESTAMP VECTOR"
assert 15,(typestr t.values()[5])== "FAST TIMESTAMP VECTOR"
assert 16,(typestr t.values()[6])== "FAST TIMESTAMP VECTOR"

@testing:case="test_timestamp64_convert"
t=table(2013.06.13 as c_date ,2012.06M as c_month,13:30:10.008 as c_time,
	13:30m as c_minute,13:30:10 as c_second,2013.06.13T13:30:10 as c_datetime,
	2012.06.13T13:30:10.008 as c_timestamp,13:30:10.008007006 as c_nanotime,2012.06.13T13:30:10.008007006 as c_nanotimestamp);
t=hdf5::read(H5_FILE_PATH+"/timestamp.h5","ts64",t)
assert 1,(size t.keys())==9
assert 2,(size t)==4
assert 3,t.values()[0]==[2013.06.13,2017.11.28,2017.11.28,2017.11.28]
assert 4,t.values()[1]==[2012.06M,2017.11M,2017.11M,2017.11M]
assert 5,cast(t.values()[2],MINUTE)==[13:30m,09:59m,09:59m,09:59m]
assert 6,t.values()[3]==[13:30m,09:59m,09:59m,09:59m]
assert 5,cast(t.values()[4],MINUTE)==[13:30m,09:59m,09:59m,09:59m]
assert 10,(typestr t.values()[0])== "FAST DATE VECTOR"
assert 11,(typestr t.values()[1])== "FAST MONTH VECTOR"
assert 12,(typestr t.values()[2])== "FAST TIME VECTOR"
assert 13,(typestr t.values()[3])== "FAST MINUTE VECTOR"
assert 14,(typestr t.values()[4])== "FAST SECOND VECTOR"
assert 15,(typestr t.values()[5])== "FAST DATETIME VECTOR"
assert 16,(typestr t.values()[6])== "FAST TIMESTAMP VECTOR"
assert 17,(typestr t.values()[7])== "FAST NANOTIME VECTOR"
assert 18,(typestr t.values()[8])== "FAST NANOTIMESTAMP VECTOR"

@testing:case="test_timestamp32"
t=hdf5::read(H5_FILE_PATH+"/timestamp.h5","ts32")
t2=hdf5::read(H5_FILE_PATH+"/timestamp.h5","ts32_in_int")
assert 1,(size t.keys())==9
assert 2,(size t2.keys())==9
assert 3,(size t)==3
assert 4,(size t2)==3
assert 5,cast(t.values()[0],LONG)==cast(t2.values()[0],LONG)*1000
assert 6,cast(t.values()[1],LONG)==cast(t2.values()[1],LONG)*1000
assert 7,cast(t.values()[2],LONG)==cast(t2.values()[2],LONG)*1000
assert 8,cast(t.values()[3],LONG)==cast(t2.values()[3],LONG)*1000
assert 9,cast(t.values()[4],LONG)==cast(t2.values()[4],LONG)*1000
assert 10,(typestr t.values()[0])== "FAST TIMESTAMP VECTOR"
assert 11,(typestr t.values()[1])== "FAST TIMESTAMP VECTOR"
assert 12,(typestr t.values()[2])== "FAST TIMESTAMP VECTOR"
assert 13,(typestr t.values()[3])== "FAST TIMESTAMP VECTOR"
assert 14,(typestr t.values()[4])== "FAST TIMESTAMP VECTOR"
assert 15,(typestr t.values()[5])== "FAST TIMESTAMP VECTOR"
assert 16,(typestr t.values()[6])== "FAST TIMESTAMP VECTOR"

@testing:case="test_timestamp32_convert"
t=table(2013.06.13 as c_date ,2012.06M as c_month,13:30:10.008 as c_time,
	13:30m as c_minute,13:30:10 as c_second,2013.06.13T13:30:10 as c_datetime,
	2012.06.13T13:30:10.008 as c_timestamp,13:30:10.008007006 as c_nanotime,2012.06.13T13:30:10.008007006 as c_nanotimestamp);
t=hdf5::read(H5_FILE_PATH+"/timestamp.h5","ts32",t)
assert 1,(size t.keys())==9
assert 2,(size t)==4
assert 3,t.values()[0]==[2013.06.13,2017.11.28,2017.11.28,2017.11.28]
assert 4,t.values()[1]==[2012.06M,2017.11M,2017.11M,2017.11M]
assert 5,cast(t.values()[2],MINUTE)==[13:30m,12:29m,12:29m,12:29m]
assert 6,t.values()[3]==[13:30m,12:29m,12:29m,12:29m]
assert 5,cast(t.values()[4],MINUTE)==[13:30m,12:29m,12:29m,12:29m]
assert 10,(typestr t.values()[0])== "FAST DATE VECTOR"
assert 11,(typestr t.values()[1])== "FAST MONTH VECTOR"
assert 12,(typestr t.values()[2])== "FAST TIME VECTOR"
assert 13,(typestr t.values()[3])== "FAST MINUTE VECTOR"
assert 14,(typestr t.values()[4])== "FAST SECOND VECTOR"
assert 15,(typestr t.values()[5])== "FAST DATETIME VECTOR"
assert 16,(typestr t.values()[6])== "FAST TIMESTAMP VECTOR"
assert 17,(typestr t.values()[7])== "FAST NANOTIME VECTOR"
assert 18,(typestr t.values()[8])== "FAST NANOTIMESTAMP VECTOR"

//loadPlugin("/home/swang/dolphin_workspace/DolphinDBPlugin/build/PluginHdf5.txt");
@testing:case="test_compound"
t=hdf5::read(H5_FILE_PATH+"/compound.h5","com")
assert 1,(size t.keys())==9
assert 2,(size t)==27
assert 3,t.values()[0][0]==`abcdefgh
assert 4,t.values()[1][0]=="this is a variable string"
assert 5,t.values()[2][0]==7.5
assert 6,t.values()[3][0]==2017.11.28T15:47:21.000
assert 7,t.values()[4][0]==23456789
assert 8,t.values()[5][0]==8.45f
assert 9,t.values()[6][0]==7
assert 10,t.values()[7][0]==23
assert 11,t.values()[8][0]=='w'
assert 12,(typestr t.values()[0])== "STRING VECTOR"
assert 13,(typestr t.values()[1])== "STRING VECTOR"
assert 14,(typestr t.values()[2])== "FAST DOUBLE VECTOR"
assert 15,(typestr t.values()[3])== "FAST TIMESTAMP VECTOR"
assert 16,(typestr t.values()[4])== "FAST LONG VECTOR"
assert 17,(typestr t.values()[5])== "FAST FLOAT VECTOR"
assert 18,(typestr t.values()[6])== "FAST INT VECTOR"
assert 19,(typestr t.values()[7])== "FAST SHORT VECTOR"
assert 20,(typestr t.values()[8])== "FAST CHAR VECTOR"

@testing:case="test_nested_compound"
t=hdf5::read(H5_FILE_PATH+"/vlen_str.h5","compound_vstr")
assert 1,(size t.keys())==7
assert 2,(size t)==4
assert 3,t.values()[0]==[1,1,1,1]
assert 4,t.values()[1]==[9.8,9.8,9.8,9.8]
assert 5,t.values()[3]==["nest vlen 1","nest vlen 2","nest vlen 3","nest vlen 4"];
assert 6,t.values()[6]==[ 9223372036854775807, 9223372036854775807, 9223372036854775807, 9223372036854775807]
assert 7,(typestr t.values()[0])== "FAST INT VECTOR"
assert 8,(typestr t.values()[1])== "FAST DOUBLE VECTOR"
assert 9,(typestr t.values()[2])== "FAST FLOAT VECTOR"
assert 10,(typestr t.values()[3])== "STRING VECTOR"
assert 11,(typestr t.values()[4])== "FAST LONG VECTOR"
assert 12,(typestr t.values()[5])== "STRING VECTOR"
assert 13,(typestr t.values()[6])== "FAST LONG VECTOR"

@testing:case="test_array"
t=hdf5::read(H5_FILE_PATH+"/array_mdatom.h5","array_int_3_dims")
assert 1,(size t.keys())==24
assert 2,(size t)==6
assert 3,t.values()[0]==[0,24,48,72,96,120]
assert 4,t.values()[1]==[1,25,49,73,97,121]
assert 5,t.values()[2]==[2,26,50,74,98,122];
assert 6,t.values()[3]==[3,27,51,75,99,123]
assert 7,(typestr t.values()[0])== "FAST INT VECTOR"
assert 8,(typestr t.values()[1])== "FAST INT VECTOR"
assert 9,(typestr t.values()[2])== "FAST INT VECTOR"
assert 10,(typestr t.values()[3])== "FAST INT VECTOR"

@testing:case="test scalar"
t=hdf5::read(H5_FILE_PATH+"/scalar.h5","variable length string")
assert 1,(size t.keys())==1
assert 2,(size t)==1
assert 3,t.values()[0]=="Some string"
