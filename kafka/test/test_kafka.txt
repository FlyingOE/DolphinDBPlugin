try{loadPlugin("plugins/kafka/PluginKafka.txt")}catch(ex){}

@testing:case="test_plugin_kafka_producerCfg_not_dict",exception=1 
kafka::producer(123)

@testing:case="test_plugin_kafka_producerCfg_error_key",exception=1
producerCfg = dict(string, any);
producerCfg["bootstrap"] = "localhost"
kafka::producer(producerCfg)

@testing:case="test_plugin_kafka_producerCfg_error_host",exception=1
producerCfg = dict(string, any);
producerCfg["bootstrap.servers"] = 123
kafka::producer(producerCfg)

@testing:case="test_plugin_kafka_consumerCfg_not_dict",exception=1 
kafka::consumer(123)

@testing:case="test_plugin_kafka_consumerCfg_error_key",exception=1
consumerCfg = dict(string, any);
consumerCfg["metadata.broker"] = "localhost";
consumer = kafka::consumer(consumerCfg)

@testing:case="test_plugin_kafka_consumerCfg_error_host",exception=1
consumerCfg = dict(string,any);
consumerCfg["metadata.broker.list"] = 123
consumer = kafka::consumer(consumerCfg)

@testing:case="test_plugin_kafka_producer"
producerCfg = dict(string, any);
producerCfg["bootstrap.servers"] = "localhost"
producer = kafka::producer(producerCfg)

@testing:case="test_plugin_kafka_consumer"
consumerCfg = dict(string, any);
consumerCfg["metadata.broker.list"] = "localhost"
consumerCfg["group.id"] = "test"
consumer = kafka::consumer(consumerCfg)

@testing:case="test_plugin_kafka_subscribe_topics_not_vector",exception=1
topics = 123
kafka::subscribe(consumer, topics)

@testing:case="test_plugin_kafka_subscribe_topics_not_string_vector",exception=1
topics = [1 2 3]
kafka::subscribe(consumer, topics)

@testing:case="test_plugin_kafka_subscribe_all_datatypes"
kafka::subscribe(consumer, ["test"])
result = kafka::consumerPoll(consumer)
kafka::produce(producer, "test","English string", "producer1:i'm producer",false,0)
result = kafka::consumerPoll(consumer)
assert 1,eqObj(result[1][2],"producer1:i'm producer")
kafka::produce(producer, "test", "Chinese string", "我是生产者",false)
result = kafka::consumerPoll(consumer)
assert 2,eqObj(result[1][2],"我是生产者")
kafka::produce(producer, "test", " integer", 10086,false)
result = kafka::consumerPoll(consumer)
result[1]
assert 3,eqObj(result[1][2],10086)
kafka::produce(producer, "test", "float", 123.45f,false)
result = kafka::consumerPoll(consumer)
assert 4,eqObj(result[1][2],123.45f)
message=[1,2,3,4]
kafka::produce(producer, "test", "integer vector", message,false)
result = kafka::consumerPoll(consumer)
assert 5,eqObj(result[1][2],message)
message=[1.1,2.2,3.3,4.4]
kafka::produce(producer, "test", " float vector", message,false)
result = kafka::consumerPoll(consumer)
assert 6,eqObj(result[1][2],message)
message=["aa","bb","cc"];
kafka::produce(producer, "test", "string vector", message,false)
result = kafka::consumerPoll(consumer)
assert 7,eqObj(result[1][2],message)
tab=table(1 2 3 as a, `x`y`z as b, 10.8 7.6 3.5 as c, "我" "我是" "我是生" as d);
kafka::produce(producer, "test", "table", tab,false);
result = kafka::consumerPoll(consumer)
assert 8,eqObj((result[1][2]).values(),tab.values())
kafka::produce(producer, "test", "void", NULL,false)
result = kafka::consumerPoll(consumer)
assert 9,eqObj(result[1][2],NULL)
kafka::produce(producer, "test", "bool", true,false)
result = kafka::consumerPoll(consumer)
assert 10,eqObj(result[1][2],true)
kafka::produce(producer, "test", "char", 'a',false)
result = kafka::consumerPoll(consumer)
assert 11,eqObj(result[1][2],'a')
kafka::produce(producer, "test", "short", 122h,false)
result = kafka::consumerPoll(consumer)
assert 12,eqObj(result[1][2],122h)
kafka::produce(producer, "test", "long", 22l,false)
result = kafka::consumerPoll(consumer)
assert 13,eqObj(result[1][2],22l)
kafka::produce(producer, "test", "date", 2013.06.13,false)
result = kafka::consumerPoll(consumer)
assert 14,eqObj(result[1][2],2013.06.13)
kafka::produce(producer, "test", "month", 2013.06M,false)
result = kafka::consumerPoll(consumer)
assert 15,eqObj(result[1][2],2013.06M)
kafka::produce(producer, "test", "time", 13:30:10.008,false)
result = kafka::consumerPoll(consumer)
assert 16,eqObj(result[1][2],13:30:10.008)
kafka::produce(producer, "test", "minute", 13:30m,false)
result = kafka::consumerPoll(consumer)
assert 17,eqObj(result[1][2],13:30m)
kafka::produce(producer, "test", "second", 13:30:10,false)
result = kafka::consumerPoll(consumer)
assert 18,eqObj(result[1][2],13:30:10)
kafka::produce(producer, "test", "datetime", 2012.06.13T13:30:10,false)
result = kafka::consumerPoll(consumer)
assert 19,eqObj(result[1][2],2012.06.13T13:30:10)
kafka::produce(producer, "test", "timestamp", 2012.06.13T13:30:10.008,false)
result = kafka::consumerPoll(consumer)
assert 20,eqObj(result[1][2],2012.06.13T13:30:10.008)
kafka::produce(producer, "test", "nanotme", 13:30:10.008007006,false)
result = kafka::consumerPoll(consumer)
assert 21,eqObj(result[1][2],13:30:10.008007006)
kafka::produce(producer, "test", "nanotmestamp", 2012.06.13T13:30:10.008007006,false)
result = kafka::consumerPoll(consumer)
assert 22,eqObj(result[1][2],2012.06.13T13:30:10.008007006)
kafka::produce(producer, "test", "double", 2.1,false)
result = kafka::consumerPoll(consumer)
assert 23,eqObj(result[1][2],2.1)
kafka::produce(producer, "test", "symbol vector", symbol("aa" "bb"),false)
result = kafka::consumerPoll(consumer)
assert 24,eqObj(result[1][2],symbol("aa" "bb"))
kafka::produce(producer, "test", "uuid", uuid(),false)
result = kafka::consumerPoll(consumer)
assert 25,eqObj(result[1][2],uuid())
kafka::produce(producer, "test", "datehour", datehour(2012.06.13 13:30:10),false)
result = kafka::consumerPoll(consumer)
assert 26,eqObj(result[1][2],datehour(2012.06.13 13:30:10))
kafka::produce(producer, "test", "code", <1+2>,false)
result = kafka::consumerPoll(consumer)
kafka::produce(producer, "test", "any dictionnary", {a:1,b:2},false)
result = kafka::consumerPoll(consumer)
//assert 27,eqObj((result[1][2]).values().sort(),({a:1,b:2}.values()).sort())
kafka::produce(producer, "test", "ipaddr", ipaddr(),false)
result = kafka::consumerPoll(consumer)
assert 28,eqObj(result[1][2],ipaddr())
a = rand(int128(),3)
kafka::produce(producer, "test", "int128",a,false)
result = kafka::consumerPoll(consumer)
assert 29,eqObj(result[1][2],a)
b = dict(1 2,1.2 2.2)
kafka::produce(producer, "test", "dict",b,false)
result = kafka::consumerPoll(consumer)
assert 30,eqObj((result[1][2]).values().sort(),b.values().sort())
m = matrix(1 2 3,4 5 6)
kafka::produce(producer, "test", "matrix",m,false)
result = kafka::consumerPoll(consumer)
assert 31,eqObj(result[1][2],m)

@testing:case="test_plugin_kafka_subscribe_all_datatypes_json_format"
kafka::produce(producer, "test","English_string", "producer1:i'm producer",true,0)
result = kafka::consumerPoll(consumer)
assert 1,eqObj(result[1][2][0],"producer1:i'm producer")
kafka::produce(producer, "test", "Chinese_string", "我是生产者",true)
result = kafka::consumerPoll(consumer)
assert 2,eqObj(result[1][2][0],"我是生产者")
kafka::produce(producer, "test", " integer", 10086,true)
result = kafka::consumerPoll(consumer)
assert 3,eqObj(result[1][2][0],10086)
kafka::produce(producer, "test", "float", 123.45f,true)
result = kafka::consumerPoll(consumer)
assert 4,eqObj(result[1][2][0],123.45f,2)
message=[1,2,3,4]
kafka::produce(producer, "test", "integer vector", message,true)
result = kafka::consumerPoll(consumer)
assert 5,eqObj(int(result[1][2]),message)
message=[1.1,2.2,3.3,4.4]
kafka::produce(producer, "test", " double vector", message,true)
result = kafka::consumerPoll(consumer)
assert 6,eqObj(double(result[1][2]),message)
message=["aa","bb","cc","dd"];
kafka::produce(producer, "test", "string vector", message,true)
result = kafka::consumerPoll(consumer)
assert 7,eqObj(string(result[1][2]),message)
tab=table(1 2 3 as a, `x`y`z as b, 10.8 7.6 3.5 as c, "aa" "bb" "cc" as d)
kafka::produce(producer, "test", "table", tab,true)
result = kafka::consumerPoll(consumer)
assert 8,eqObj((result[1][2]).size(),4)
assert 9,eqObj(int((result[1][2])["a"]),1..3)
assert 10,eqObj(string((result[1][2])["b"]),`x`y`z)
assert 11,eqObj(double((result[1][2])["c"]),10.8 7.6 3.5)
assert 12,eqObj(string((result[1][2])["d"]),"aa" "bb" "cc")
kafka::produce(producer, "test", "void", NULL,true)
result = kafka::consumerPoll(consumer)
assert 9,eqObj(result[1][2][0],NULL)
kafka::produce(producer, "test", "bool", true,true)
result = kafka::consumerPoll(consumer)
assert 10,eqObj(result[1][2][0],true)
kafka::produce(producer, "test", "char", 'a',true)
result = kafka::consumerPoll(consumer)
assert 11,eqObj(result[1][2][0],"a")
kafka::produce(producer, "test", "short", 122h,true)
result = kafka::consumerPoll(consumer)
assert 12,eqObj(result[1][2][0],122h)
kafka::produce(producer, "test", "long", 9223372036854775807l,true)
result = kafka::consumerPoll(consumer)
assert 13,eqObj(result[1][2][0],9223372036854775807l)
kafka::produce(producer, "test", "date", 2013.06.13,true)
result = kafka::consumerPoll(consumer)
assert 14,eqObj(result[1][2][0],string(2013.06.13))
kafka::produce(producer, "test", "month", 2013.06M,true)
result = kafka::consumerPoll(consumer)
assert 15,eqObj(result[1][2][0],string(2013.06M))
kafka::produce(producer, "test", "time", 13:30:10.008,true)
result = kafka::consumerPoll(consumer)
assert 16,eqObj(result[1][2][0],string(13:30:10.008))
kafka::produce(producer, "test", "minute", 13:30m,true)
result = kafka::consumerPoll(consumer)
assert 17,eqObj(result[1][2][0],string(13:30m))
kafka::produce(producer, "test", "second", 13:30:10,true)
result = kafka::consumerPoll(consumer)
assert 18,eqObj(result[1][2][0],string(13:30:10))
kafka::produce(producer, "test", "datetime", 2012.06.13T13:30:10,true)
result = kafka::consumerPoll(consumer)
assert 19,eqObj(result[1][2][0],string(2012.06.13T13:30:10))
kafka::produce(producer, "test", "timestamp", 2012.06.13T13:30:10.008,true)
result = kafka::consumerPoll(consumer)
assert 20,eqObj(result[1][2][0],string(2012.06.13T13:30:10.008))
kafka::produce(producer, "test", "nanotme", 13:30:10.008007006,true)
result = kafka::consumerPoll(consumer)
assert 21,eqObj(result[1][2][0],string(13:30:10.008007006))
kafka::produce(producer, "test", "nanotmestamp", 2012.06.13T13:30:10.008007006,true)
result = kafka::consumerPoll(consumer)
assert 22,eqObj(result[1][2][0],string(2012.06.13T13:30:10.008007006))
kafka::produce(producer, "test", "double", 2.1,true)
result = kafka::consumerPoll(consumer)
assert 23,eqObj(result[1][2][0],2.1)
kafka::produce(producer, "test", "symbol vector", symbol("aa" "bb"),true)
result = kafka::consumerPoll(consumer)
assert 24,eqObj(result[1][2][0],"aa")
kafka::produce(producer, "test", "uuid", uuid(),true)
result = kafka::consumerPoll(consumer)
assert 25,eqObj(result[1][2][0],uuid())
kafka::produce(producer, "test", "datehour", datehour(2012.06.13 13:30:10),true)
result = kafka::consumerPoll(consumer)
assert 26,eqObj(result[1][2][0],string(datehour(2012.06.13 13:30:10)))
kafka::produce(producer, "test", "code", <1+2>,true)
result = kafka::consumerPoll(consumer)
kafka::produce(producer, "test", "any dictionnary", {a:1,b:2},true)
result = kafka::consumerPoll(consumer)
assert 27,eqObj((result[1][2]).values(),{a:1,b:2}.values())
kafka::produce(producer, "test", "ipaddr", ipaddr(),true)
result = kafka::consumerPoll(consumer)
assert 28,eqObj(result[1][2][0],ipaddr())
a = rand(int128(),1)[0]
kafka::produce(producer, "test", "int128",a,true)
result = kafka::consumerPoll(consumer)
assert 29,eqObj(result[1][2][0],string(a))
b = dict("a" "b",1.2 2.2)
kafka::produce(producer, "test", "dict",b,true)
result = kafka::consumerPoll(consumer)
assert 30,eqObj((result[1][2])["a"],b["a"])
assert 31,eqObj((result[1][2])["b"],b["b"])
b = dict(1 2,1.2 2.2)
kafka::produce(producer, "test", "dict",b,true)
result = kafka::consumerPoll(consumer)

@testing:case="test_plugin_kafka_produce_function",exception=1
def fun(a,b){
	return a+b
}
kafka::produce(producer, "test", "function", fun,false)

@testing:case="test_plugin_kafka_subscribe_pollBatch_batch_size_not_interger"
kafka::consumerPollBatch(consumer,2.1)

@testing:case="test_plugin_kafka_subscribe_pollBatch_batch_timeout_negative"
kafka::consumerPollBatch(consumer,2,-1)

@testing:case="test_plugin_kafka_pollBatch"
kafka::produce(producer, "test", 1, "i'm producer",false)
kafka::produce(producer, "test", 1, 1234 ,false)
result = kafka::consumerPollBatch(consumer,2)
assert 1,eqObj(result[0][1][2],"i'm producer")
assert 2,eqObj(result[1][1][2],1234)
def timeOut(producer){
	sleep(6000)
	kafka::produce(producer, "test", 1, "i'm producer",false)
	kafka::produce(producer, "test", 1, 1234 ,false)
}
submitJob("job1","timeout",timeOut,producer)
result = kafka::consumerPollBatch(consumer,2,5000)
assert 3,eqObj(result[0],"No more message")
result = kafka::consumerPollBatch(consumer,2)
def inTime(producer){
	sleep(2000)
	kafka::produce(producer, "test", 1, "i'm producer1",false)
	kafka::produce(producer, "test", 1, 12345 ,false)
}
submitJob("job2","inTime",inTime,producer)
result = kafka::consumerPollBatch(consumer,2,7000)
assert 4,eqObj(result[0][1][2],"i'm producer1")
assert 5,eqObj(result[1][1][2],12345)
kafka::produce(producer, "test", 1, "i'm producer",true)
kafka::produce(producer, "test", 1, 1234 ,true)
result = kafka::consumerPollBatch(consumer,2)
assert 6,eqObj(result[0][1][2][0],"i'm producer")
assert 7,eqObj(result[1][1][2][0],1234)
/*for(i in 1..1000000){
	kafka::produce(producer, "test", 1, 1234 ,false)
}
result = kafka::consumerPollBatch(consumer,1000001)
assert 4,eqObj(result.size(),1000000)*/
topics = ["test"]
partitions = [0]
offsets = [0]
kafka::assign(consumer,topics,partitions,offsets)
result = kafka::consumerPollBatch(consumer,4)
assert 8,eqObj(result.size(),4)
batchsize = kafka::getOffset(consumer,"test",0)
kafka::assign(consumer,topics,partitions,[batchsize[1]])
result = kafka::consumerPollBatch(consumer,1)
assert 9,eqObj(result[0],"No more message")

@testing:case="test_plugin_kafka_pollDict"
kafka::produce(producer, "test", "1", "aa",false,0)
kafka::produce(producer, "test", "2", 1..3,false,0)
kafka::produce(producer, "test", "3", 10086,false,0)
kafka::produce(producer, "test", "4", 123.456,false,0)
result = kafka::pollDict(consumer,4)
assert 1,eqObj(result.size(),4)
def timeOut(producer){
	sleep(6000)
	kafka::produce(producer, "test", "1", 1..3,true)
}
submitJob("job3","timeout",timeOut,producer)
result = kafka::pollDict(consumer,2,5000)
assert 2,eqObj(result,NULL)
result = kafka::pollDict(consumer,1)
def inTime(producer){
	sleep(2000)
	kafka::produce(producer, "test", "1",1..3 ,false)
}
submitJob("job4","inTime",inTime,producer)
result = kafka::pollDict(consumer,2,7000)
assert 3,eqObj(result["1"],1..3)

@testing:case="test_plugin_kafka_assign_unassign"
topics = ["test"]
partitions = [0]
offsets = [0]
kafka::assign(consumer,topics,partitions,offsets)
kafka::unassign(consumer)
result = kafka::consumerPoll(consumer)
assert 2,eqObj(result[0],"No more message")

@testing:case="test_plugin_kafka_setProducerTime"
res = kafka::setProducerTime(producer,1000)

@testing:case="test_plugin_kafka_getProducerTime"
res = kafka::getProducerTime(producer)
assert 1,eqObj(res,1000)

@testing:case="test_plugin_kafka_commit"
kafka::commit(consumer)

@testing:case="test_plugin_kafka_commitTopic"
kafka::commitTopic(consumer,["test"],[0],[1])

@testing:case="test_plugin_kafka_setConsumerTime"
kafka::setConsumerTime(consumer,1000)

@testing:case="test_plugin_kafka_getConsumerTime"
res = kafka::getConsumerTime(consumer)
assert 1,eqObj(res,1000)

@testing:case="test_plugin_kafka_getAssignment"
kafka::subscribe(consumer, ["test"])
kafka::unsubscribe(consumer)
topics = ["test"]
partitions = [0]
offsets = [0]
kafka::assign(consumer,topics,partitions,offsets)
kafka::getAssignment(consumer)
kafka::consumerPoll(consumer)

@testing:case="test_plugin_kafka_pause"
kafka::pause(consumer)

@testing:case="test_plugin_kafka_resume"
kafka::resume(consumer)

@testing:case="test_plugin_kafka_createSubJob",exception=1
def seedParse(x, tagInfo){
	return x
}
st = streamTable(40000000:0,`tag`ts`data,[SYMBOL,TIMESTAMP,INT])
kafka::createSubJob(consumer,st,seedParse,"streamtable")

@testing:case="test_plugin_kafka_cancelSubJob",exception=1
kafka::cancelSubJob("a")

@testing:case="test_plugin_kafka_setMessageSize",exception=1
kafka::setMessageSize("a")

@testing:case="test_plugin_kafka_getMessageSize"
kafka::setMessageSize(100)
res = kafka::getMessageSize()
assert 1,eqObj(res,100)

@testing:case="test_plugin_kafka_setBufferSize",exception=1
kafka::setBufferSize("a")

@testing:case="test_plugin_kafka_getMessageSize"
kafka::setBufferSize(1000)
res = kafka::getBufferSize()
assert 1,eqObj(res,1000)

@testing:case="test_plugin_kafka_getConsumerQueue",exception=1
queue=kafka::getConsumerQueue(producer)

@testing:case="test_plugin_kafka_Queue"
kafka::produce(producer, "test", "1", "aa",false,0)
kafka::produce(producer, "test", "2", "aa",false,0)
queue=kafka::getConsumerQueue(consumer)
len = kafka::queueLength(queue)
assert 1,eqObj(len,2)
res = kafka::queuePoll(queue)
assert 2,eqObj(res[1][1],"1")
res = kafka::queuePoll(queue)
assert 3,eqObj(res[1][1],"2")
kafka::produce(producer, "test", "1", "aa",false,0)
kafka::produce(producer, "test", "2", "aa",false,0)
res = kafka::queuePollBatch(queue, 2)
assert 4,eqObj(res[0][1][1],"1")
assert 5,eqObj(res[1][1][1],"2")
kafka::setQueueTime(queue,100)
res = kafka::getQueueTime(queue)
assert 6,eqObj(res,100)

@testing:case="test_plugin_kafka_event"
kafka::produce(producer, "test", "1", "bb",false,0)
event=kafka::queueEvent(queue)
res = kafka::getEventName(event)
assert 1,eqObj(res,"Fetch")
res = kafka::eventGetMessage(event)
assert 2,eqObj(res[0][1][2],"bb")
res = kafka::getEventMessageCount(event)
assert 3,eqObj(res,1)
res = kafka::eventGetPart(event)
res = kafka::eventGetError(event)
assert 5,eqObj(res,"Success")









